<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use {{ rootNamespace }}Http\Controllers\Base\BaseController;
use {{ rootNamespace }}Http\Requests{{namespacedPrefix}}\{{ model }}\{{ model }}Request;
use {{ rootNamespace }}Repository{{namespacedPrefix}}\{{ model }}\{{ model }}RepositoryInterface;
use Illuminate\Http\Request;
use Illuminate\Http\Response;

/**
 * Class {{ class }}
 * @package {{ namespace }}
 */
class {{ class }} extends BaseController
{
    /**
     * {{ model }}ApiController constructor.
     * @param {{ model }}RepositoryInterface $repository
     */
    public function __construct({{ model }}RepositoryInterface $repository)
    {
        $this->repository = $repository;
    }

    /**
     * Display a listing of the resource.
     *
     * @return Response
     */
    public function index()
    {
        return $this->repository->collectionModel(\request()->has('all') ? $this->repository->all() : $this->repository->paginate());
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param Request $request
     * @return Response
     */
    public function store({{ model }}Request $request)
    {
        return $this->repository->create( $request->validated());
    }

    /**
     * Display the specified resource.
     *
     * @param {{ model }} ${{ modelVariable }}
     * @return Response
     */
    public function show({{ model }} ${{ modelVariable }})
    {
        return $this->repository->resourceModel(${{ modelVariable }});
    }

    /**
     * Update the specified resource in storage.
     *
     * @param Request $request
     * @param {{ model }} ${{ modelVariable }}
     * @return Response
     */
    public function update({{ model }}Request $request, {{ model }} ${{ modelVariable }})
    {
        return $this->repository->update(${{ modelVariable }}, $request->validated());
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param {{ model }} ${{ modelVariable }}
     * @return Response
     */
    public function destroy({{ model }} ${{ modelVariable }})
    {
        return $this->repository->delete(${{ modelVariable }});
    }

}
