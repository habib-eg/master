<?php

namespace {{namespace}}Repository\Base;

use Exception;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Log;

class BaseRepository
{
    /**
     * @var Model $baseModel
     */
    public $baseModel;
    /**
     * @var Builder $query
     */
    public $query;

    /**
     * BaseRepository constructor.
     * @param Model $model
     */
    public function __construct(Model $model)
    {
        $this->baseModel = $model;
        $this->query = $this->baseModel->newQuery();

    }

    /**
     * @return Builder[]|Collection
     */
    public function all()
    {
        $all = $this->query()->get();

        return request()->wantsJson() ? $this->collectionModel($all) : $all;
    }

    /**
     * @return Builder
     */
    public function query()
    {
        return $this->query;
    }

    /**
     * @param $all
     * @return mixed
     */
    public function collectionModel($all)
    {
        return $all;
    }

    /**
     * @return LengthAwarePaginator|Collection
     */
    public function paginate()
    {
        $paginate = $this->query()->paginate();

        return request()->wantsJson() ? $this->collectionModel($paginate) : $paginate;
    }

    /**
     * @param array $array
     * @param null $model
     * @param string|null $relation
     * @return mixed
     */
    public function create(array $array, $model = null, string $relation = null)
    {
        if ($model instanceof Model && $relation) {
            $this->eventCreate($data = $model->{$relation}->create($array));
            return $data;
        }

        $class = is_null($model) ? $this->baseModel->getMorphClass() : (($model instanceof Model) ? $model->getMorphClass() : $model);
        $this->eventCreate($data = $class::create($array));
        return $data;
    }

    /**
     * @param Model $model
     */
    protected function eventCreate(Model $model)
    {
        //fire created event
    }

    /**
     * @param array $array
     * @param null $field
     * @return bool
     */
    public function deleteMany(array $array, $field = null)
    {
        foreach ($array as $key => $item) {
            $this->delete($this->baseModel->resolveRouteBinding($key, $field));
        }
        return true;
    }

    /**
     * @param Model $model
     * @return bool
     */
    public function delete(Model $model)
    {
        $deleted = $model;
        try {
            $model->delete();
        } catch (Exception $e) {
            Log::info($e);
        }
        $this->eventDelete($deleted);
        return true;
    }

    /**
     * @param Model $model
     */
    protected function eventDelete(Model $model)
    {
        //fire Deleted event
    }

    /**
     * @param array $array
     * @param null $field
     * @return bool
     */
    public function updateMany(array $array, $field = null)
    {
        foreach ($array as $key => $item) {
            $this->update($this->baseModel->resolveRouteBinding($key, $field), $item);
        }
        return true;
    }

    /**
     * @param Model $model
     * @param array $array
     * @return Model
     */
    public function update(Model $model, array $array)
    {
        $model->update($array);
        $this->eventUpdate($model);
        return $model;
    }

    /**
     * @param Model $model
     */
    protected function eventUpdate(Model $model)
    {
        //fire Updated event
    }

    public function show(Model $model)
    {
        return request()->wantsJson() ? $this->resourceModel($model) : $model;
    }

    public function resourceModel(Model $model)
    {
        return $model;
    }
}
